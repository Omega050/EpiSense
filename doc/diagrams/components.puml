@startuml episense-c4-components
!include https://raw.githack.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title "EpiSense — C4 Nível Componente (dentro do Monólito Modular)"

' Atores/Sistemas externos (interagem com componentes específicos)
Person(manager, "Gestor de Saúde", "Consulta alertas.")
System_Ext(fhir_server, "Servidor FHIR", "Envio de hemogramas (FHIR R4).")
System_Ext(fcm, "Firebase Cloud Messaging", "Notificações push.")

' Limite do contêiner (aplicação monolítica)
Container_Boundary(app, "Aplicação EpiSense (.NET 8)") {
  Component(api, "API REST", "ASP.NET Core Minimal API", "Recebe dados (Observations), expõe endpoints de consulta, orquestra análise via Hangfire.")
  Component(hangfire, "Hangfire", "Processamento Assíncrono", "Enfileira e processa análises individuais.")
  Component(mediator, "Mediador (MediatR)", "Barramento in-memory", "Publicação/assinatura de eventos de domínio (E-CST).")
  
  ' Módulo de Ingestão
  Component(ingestion_mod, "Módulo de Ingestão", "EpiSense.Ingestion", "Recebe e valida dados FHIR brutos.")
  
  ' Módulo de Análise (dividido em duas responsabilidades)
  Component(analysis_mod, "Módulo de Análise", "EpiSense.Analysis", "Processa dados FHIR e realiza análises epidemiológicas.")
  Component(fhir_service, "FhirAnalysisService", "Análise Individual", "Processa FHIR individual, anonimiza dados, detecta flags clínicas (SIB_SUSPEITA, SIB_GRAVE).")
  Component(observation_service, "ObservationAnalysisService", "Análise Quantitativa", "Análises baseadas em triggers (Shewhart, agregações, detecção de anomalias) - em implementação.")
  
  Component(alerts_mod, "Módulo de Alertas", "EpiSense.Alerts", "Reage a eventos; cria/atualiza alertas.")
  
  ' Persistência Híbrida (ADR-006)
  ComponentDb(ingestion_repo, "Persistência Ingestão", "MongoDB (driver C#)", "Dump de dados brutos FHIR.")
  ComponentDb(analysis_repo, "Persistência Análise", "PostgreSQL + EF Core", "ObservationSummary (flags clínicas), DailyCaseAggregation (agregações), triggers.")
  ComponentDb(alerts_repo, "Persistência de Alertas", "MongoDB (driver C#)", "Alertas e notificações.")
}

' Relações externas
Rel(fhir_server, api, "Envia hemogramas", "HTTPS/mTLS")
Rel(manager, api, "Consulta alertas", "HTTPS/REST")
Rel(alerts_mod, fcm, "Dispara notificações", "HTTPS")

' Relações internas - Fluxo de Dados (ADR-006: Arquitetura Híbrida)
Rel(api, ingestion_mod, "Envia dados FHIR", "In-process")
Rel(ingestion_mod, ingestion_repo, "Armazena dados brutos (dump)", "MongoDB Driver")

Rel(api, hangfire, "Enfileira análise individual", "Hangfire Background Job")
Rel(hangfire, analysis_mod, "Dispara análise", "In-process")
Rel(analysis_mod, fhir_service, "Processa FHIR individual", "In-process")
Rel(fhir_service, analysis_repo, "Persiste ObservationSummary", "Entity Framework")

Rel(observation_service, analysis_repo, "Lê ObservationSummary / Persiste agregações", "Entity Framework")
Rel_U(analysis_mod, observation_service, "Triggers periódicos", "Scheduled/Manual")

Rel(analysis_mod, mediator, "Publica eventos (E-CST)", "In-memory")
Rel_R(mediator, alerts_mod, "Entrega eventos", "In-memory subscription")
Rel(alerts_mod, alerts_repo, "Persiste alertas", "MongoDB Driver")

' Notas de alinhamento com ADRs
' - ADR-001: .NET 8 + C# para backend
' - ADR-002: MongoDB com driver nativo para dump de dados brutos (ingestão)
' - ADR-006: Arquitetura híbrida - MongoDB (ingestão dump) + PostgreSQL (análise) + MongoDB (alertas)
' - ADR-003: Mediador in-memory (MediatR), módulos desacoplados
' - ADR-008: API orquestra análise via Hangfire (processamento assíncrono)
' - Implementação: 
'   * FhirAnalysisService: Análise individual FHIR, anonimização, flags clínicas (SIB)
'   * ObservationAnalysisService: Análises quantitativas, triggers, Shewhart, agregações (em implementação)
'   * PostgreSQL: ObservationSummary, DailyCaseAggregation (JSONB)
' - Análise não acessa MongoDB diretamente; recebe dados da API via Hangfire
@enduml