using Microsoft.Extensions.Logging;

namespace EpiSense.Ingestion.Infrastructure;

public class ConsoleEventPublisher : IEventPublisher
{
    private readonly ILogger<ConsoleEventPublisher> _logger;

    public ConsoleEventPublisher(ILogger<ConsoleEventPublisher> logger)
    {
        _logger = logger;
    }

    public async Task PublishDataIngestedAsync(string dataId)
    {
        _logger.LogInformation("üì• Data Ingested: {DataId} at {Timestamp}", dataId, DateTime.UtcNow);
        
        // Simula publica√ß√£o de evento
        await Task.Delay(10);
        
        Console.WriteLine($"‚úÖ EVENT: Data {dataId} successfully ingested");
    }

    public async Task PublishDataValidationFailedAsync(string dataId, string error)
    {
        _logger.LogWarning("‚ùå Data Validation Failed: {DataId} - {Error} at {Timestamp}", dataId, error, DateTime.UtcNow);
        
        await Task.Delay(10);
        
        Console.WriteLine($"‚ö†Ô∏è EVENT: Data {dataId} validation failed - {error}");
    }

    public async Task PublishDataTransformedAsync(string dataId)
    {
        _logger.LogInformation("üîÑ Data Transformed: {DataId} at {Timestamp}", dataId, DateTime.UtcNow);
        
        await Task.Delay(10);
        
        Console.WriteLine($"üîÑ EVENT: Data {dataId} successfully transformed");
    }
}